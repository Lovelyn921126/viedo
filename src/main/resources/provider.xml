<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://dubbo.apache.org/schema/dubbo 
       http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
       
       <dubbo:application name="hello-world-app" />
       <dubbo:registry address="multicast://224.5.6.7:1234" check="true" id="chinaRegistry"/>
        <dubbo:registry address="multicast://224.5.6.7:1235" check="true" id="intlRegistry" default="
        false"/>
       <dubbo:protocol name="dubbo" port="20880" dispatcher="all" threadpool="fixed" threads="100"/>
      <!-- Dispatcher
      all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等。
      direct 所有消息都不派发到线程池，全部在 IO 线程上直接执行。
      message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
      execution 只请求消息派发到线程池，不含响应，响应和其它连接断开事件，心跳等消息，直接在 IO 线程上执行。
      connection 在 IO 线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池。 -->
      <!-- ThreadPool
      fixed 固定大小线程池，启动时建立线程，不关闭，一直持有。(缺省)
      cached 缓存线程池，空闲一分钟自动删除，需要时重建。
      limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩的目的是为了避免收缩时突然来了大流量引起的性能问题。
      eager 优先创建Worker线程池。在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。
                     当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。阻塞队列充满时抛出RejectedExecutionException。(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列) -->
       <dubbo:protocol name="rmi" port="1099" />
       <dubbo:service interface="com.alibaba.dubbo.demo.DemoService" version="0.0.0" registry="intlRegistry" ref="demoService" retries="2" cluster="failsafe" loadbalance="roundrobin" protocol="dubbo"></dubbo:service>
       <dubbo:service interface="com.alibaba.hello.api.DemoService" version="*" ref="demoService" protocol="rmi" group="demo" registry="chinaRegistry" /> 
       <dubbo:consumer cache="lru" check="true" actives="1000" cluster="true"/>
       <!-- 和本地bean一样实现服务 -->
       <bean id="demoService" class="com.alibaba.dubbo.demo.provider.DemoServiceImpl" />
</beans>